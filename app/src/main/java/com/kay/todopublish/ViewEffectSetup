
/**
 * A class to handle one-shot events from a ViewModel back to a composable screen. Used for things like
 * navigation or triggering things like animations or scroll events. Uses a channel to ensure a hot stream
 * with a single observer where events are guaranteed to be received once and only once.
 *
 * T should be a sealed class or interface that defines your view effects.
 *
 * Best used in conjunction with the ViewEffects composable.
 */
class ViewEffects<T> {
    private val effects = Channel<T>()
    suspend fun collect(block: suspend (T) -> Unit) {
        effects.receiveAsFlow().collect { block(it) }
    }

    context(ViewModel)
    fun send(effect: T) {
        viewModelScope.launch {
            effects.send(effect)
        }
    }
}

/**
 * Composable to collect events from the ViewEffects class. Usually used at the top of a screen.
 */
@Composable
fun <T> ViewEffects(viewEffects: ViewEffects<T>, block: suspend CoroutineScope.(T) -> Unit) {
    LaunchedEffect(Unit) {
        viewEffects.collect { block(it) }
    }
}



// Example usage
class YourViewModel : ViewModel() {

    val viewEffects = ViewEffects<YourViewEffects>()

    fun someFunction() {
        // do some things
        viewEffects.send(YourViewEffects.Navigate)
    }
}

sealed interface YourViewEffects {
    object Navigate : YourViewEffects
}

@Composable
fun YourScreen(viewModel: ViewModel = YourViewModel()) {
    ViewEffects(viewModel.viewEffects) { effect ->
        when (effect) {
            YourViewEffects.Navigate ->
        }
    }
}